<?xml version="1.0" encoding="utf-8"?>
<materia:CreatorBase xmlns:mx="http://www.adobe.com/2006/mxml"
                     xmlns:materia="materia.*"
                     xmlns:questionAnswerDataGrid="materia.components.questionAnswerDataGrid.*"
                     xmlns:components="materia.components.*" xmlns:help="materia.help.*"
                     width="100%" height="100%"
                     backgroundColor="#3B3E40"
                     horizontalScrollPolicy="off" verticalScrollPolicy="off">
<mx:Style>
	.modeRadio {
		color: #e0e0e0;
		font-size: 18;
		text-roll-over-color: #ffffff;
		text-selected-color: #e0e0e0;
	}
	.modeExplanation {
		color: #e0e0e0;
		font-weight: normal;
		font-size: 12;
	}
	.stepper {
		font-size: 18;
		color: #202020;
		text-align: center;
		font-weight: bold;
		font-family: "Arial";
	}
</mx:Style>
<mx:Script>
<![CDATA[
	import materia.CreatorConfig;
	import mx.controls.Alert;
	import mx.controls.dataGridClasses.DataGridColumn;
	import materia.questionStorage.Question;
	import materia.questionStorage.QuestionGroup;
	import materia.questionStorage.QuestionSet;

	use namespace mx_internal;
   	//--------------------------------------------------------------------------
    //
    //  Variables
    //
    //--------------------------------------------------------------------------
	[Bindable]
	private var gameTitle:String = "New [] Widget";
    //--------------------------------------------------------------------------
    //
    //  Overridden methods
    //
    //--------------------------------------------------------------------------
    /**
     *	Called when creating a new game (not called when editing)
	 */
	public override function initNewWidget(widget:Object, baseUrl:String):void
	{
		super.initNewWidget(widget, baseUrl);
		instanceTitle = "New Sequencer Widget";
		customizeDatagrid();
	}
	/**
	 *	Called after init() when game is edited (loaded with a qset)
	 */
	protected override function initExistingWidget(title:String, widget:Object, qset:Object, version:String, baseUrl:String):void
	{
		super.initExistingWidget(title, widget, qset, version, baseUrl); // clean up the qset and settings objects
		customizeDatagrid();
		for(var i:int = 0; i < questionSet.items[0].items.length; i++)
		{
			questionInputList.addQuestion(questionSet.items[0].items[i], false);
		}
		// import the options and update the assessment mode ui
		if(questionSet.items[0].options.penalty > 0 || questionSet.items[0].options.freeTries > 0)
		{
			// switch to assessment mode
			assessmentRadio.dispatchEvent(new MouseEvent(MouseEvent.CLICK))
			penaltyStepper.value = questionSet.items[0].options.penalty;
			// update the free tries button if needed
			if(questionSet.items[0].options.freeTries > 0)
			{
				freeTriesButton.dispatchEvent(new MouseEvent(MouseEvent.CLICK))
				freeTriesStepper.value = questionSet.items[0].options.freeTries
			}
		}
	}


	public override function onSaveClicked(mode:String = 'save'):void
	{
		if(!checkForErrors())
		{
			var qSet:QuestionSet = new QuestionSet(instanceTitle)
			var qGroup:QuestionGroup = generateQSET() as QuestionGroup
			qSet.addGroup(generateQSET() as QuestionGroup)


			var qsetObject:Object = qSet.convertToObject()
			scrubErrorsFromQSet(qsetObject);

			ExternalInterface.call("__materia_flash_save", instanceTitle, qsetObject, questionSetVersion)
		}
		else
		{
			ExternalInterface.call("__materia_flash_cancelSave")
		}
	}

	/**
	 *	Called once for each question that was selected to be imported.
	 */
	public override function addImportedQuestion(question:Question):Question
	{
		var q:Question = super.addImportedQuestion(question);
		var newQ:Question = new Question("QA", q.options, q.id, q.question, "");
		if(newQ.options.description == null)
		{
			newQ.options.description = "";
			newQ.id = 0;
		}
		questionInputList.addQuestion(newQ);
		return q;
	}
    //--------------------------------------------------------------------------
    //
    //  Methods
    //
    //--------------------------------------------------------------------------
	/**
	 * Customizes the DataGrid by adding custom components for the sequencer creator
	 */
	private function customizeDatagrid():void
	{
		// Add customized TextInputItem
		questionInputList.questionHeaderLabel = "Item Name";
		var sequencerItem:SequencerInputItem = new SequencerInputItem();
		sequencerItem.placeHolderText = questionInputList.placeHolderText;
		sequencerItem.explanationText = questionInputList.questionExplanationText;
		sequencerItem.characterLimit = questionInputList.questionColumn.characterLimit;
		sequencerItem.multiline = questionInputList.multilineFields;
		sequencerItem.showWordCount = false;
		questionInputList.questionColumn.itemRenderer = sequencerItem;
		questionInputList.questionColumn.width = 200;
		// Add customized description TextInputItem
		var descColumn:DataGridColumn = questionInputList.addOptionColumn('Description (Optional)', 'description', 2, true);
		var descriptionItem:SequencerDescriptionInputItem = new SequencerDescriptionInputItem();
		descriptionItem.characterLimit = 2048;
		descriptionItem.characterLimitVisible = false;
		descColumn.itemRenderer = descriptionItem;
		// Disable Answer Column (answers are generated from order in datagrid)
		questionInputList.answerColumn.editable = false;
		questionInputList.answerColumn.visible = false;
		// Listen for description changed
		questionInputList.addEventListener("descriptionChanged", descriptionChanged, false, 0, true);
	}
	private function descriptionChanged(e:Event):void
	{
		var descField:SequencerDescriptionInputItem = SequencerDescriptionInputItem(e.target);
		var index:int = questionInputList.itemRendererToIndex(descField);
		var item:SequencerInputItem = SequencerInputItem(questionInputList.indicesToItemRendererUnrecycled(index,1));
		item.updateToolTipIcon();
	}
	/**
	 *	Check to make sure we have valid info everywhere
	 *
	 *	<p>Will display an Alert with the errors found</p>
	 *
	 *	@return A value of <code>true</code> means there was an error;
	 *	A value of <code>false</code> means there is no error.
	 */
	private function checkForErrors():Boolean
	{
		var qSet:QuestionGroup = QuestionGroup(generateQSET())
		var numQs:int = qSet.items.length
		for(var i:int = 0; i < numQs; i++)
		{
			for(var j:int = 0; j < numQs; j++)
			{
				if(j != i)
				{
					if(qSet.items[i].question == qSet.items[j].question)
					{
						Alert.show("There are duplicated steps in this sequence.", "Game Errors");
						return true
					}
				}
			}
		}
		return false
	}
    /**
    * 	Build qset for saving/publishing
    */
    private function generateQSET():Object
    {
		var qGroup:QuestionGroup = questionInputList.generateQGroup(instanceTitle);
		for(var i:int = 0; i < qGroup.items.length; i++)
		{
			qGroup.items[i].answers[0].text = (i + 1) + "";
		}
		if(practiceRadio.selected)
		{
			qGroup.options.freeTries = 0;
			qGroup.options.penalty = 0;
		}
		else
		{
			qGroup.options.freeTries = freeTriesStepper.value;
			qGroup.options.penalty = penaltyStepper.value;
		}
		return qGroup;
    }
]]>
</mx:Script>
	<mx:VBox top="10" bottom="10" left="10" right="10">
		<mx:HBox width="100%" height="40" verticalAlign="middle" paddingRight="5" paddingLeft="5">
			<mx:Label text="Widget Title: " styleName="sectionLabel"/>
			<mx:TextInput id="titleField" text="{instanceTitle}" maxChars="{CreatorConfig.MAX_TITLE_LENGTH}" change="{instanceTitle=titleField.text;}" height="100%" width="100%" styleName="titleField"/>
		</mx:HBox>
		<mx:HRule width="100%" />
		<mx:Canvas width="100%" height="100%" styleName="creatorSectionMajor">
			<mx:HBox top="10" bottom="10" left="10" right="10" paddingTop="10" paddingBottom="10" paddingRight="10" paddingLeft="10">
				<mx:VBox width="100%" height="100%" styleName="creatorSectionMinor" >
					<mx:HBox width="100%" verticalAlign="middle">
						<mx:Label text="Sequencer Terms:" styleName="sectionLabel"/>
					</mx:HBox>
					<questionAnswerDataGrid:QuestionAnswerDataGrid id = "questionInputList"
																   width="100%" height="100%"
																   answerHeaderLabel="Answer"
																   questionHeaderLabel="Question"
																   />
				</mx:VBox>
					<mx:VBox width="300" height="100%"  horizontalAlign="left" verticalGap="15">
						<mx:VBox paddingTop="5" width="100%" styleName="creatorSectionMinor">
							<mx:RadioButtonGroup id="radiogroup1" change="{penaltyContainer.visible = !practiceRadio.selected; freeTriesContainer.visible = !practiceRadio.selected; }"/>
							<mx:RadioButton id="practiceRadio" styleName="modeRadio" label="Practice Mode" groupName="radiogroup1" selected="true" />
							<mx:Text styleName="modeExplanation" text="In practice mode, students will have unlimited attempts to submit the correct sequence. Every student who submits the correct sequence will receive a perfect score." width="100%" selectable="false" />
							<mx:RadioButton id="assessmentRadio" styleName="modeRadio" label="Assessment Mode" groupName="radiogroup1"/>
							<mx:Text styleName="modeExplanation" text="In assessment mode, students will be penalized for each incorrect sequence they submit. The instructor can allow a number of free attempts before penalties apply." width="100%" selectable="false" />
							<mx:Text text="" />
						</mx:VBox>
						<mx:VBox width="100%" id="penaltyContainer" styleName="creatorSectionMinor" visible="false">
							<mx:Label text="Penalty For Incorrect Submissions" styleName="whiteText" width="100%"/>
							<mx:HBox width="100%" verticalAlign="middle">
								<help:HelpDot toolTip="This determines how many points students will lose each time they submit an incorrect sequence."/>
								<mx:NumericStepper styleName="stepper" id="penaltyStepper" width="65" value="15" minimum="5" maximum="100" stepSize="5"/>
								<mx:Label text="Percent" styleName="whiteText"/>
							</mx:HBox>
						</mx:VBox>
						<mx:VBox width="100%" id="freeTriesContainer" styleName="creatorSectionMinor" visible="false">
							<mx:Label text="Penalty-Free Submissions" styleName="whiteText"/>
							<mx:HBox verticalAlign="middle">
								<help:HelpDot toolTip="If enabled, students will have this many free tries to submit their sequence before losing any points."/>
								<mx:Canvas height="100%">
									<mx:Button id="freeTriesButton" label="Allow Free Submissions" click="{freeTriesButton.visible = false; freeTriesStepper.value = 1; freeTriesHBox.visible = true;}" />
									<mx:HBox id="freeTriesHBox" visible="false">
										<mx:NumericStepper styleName="stepper" id="freeTriesStepper" width="65" focusAlpha="0" value="0" change="{ if(freeTriesStepper.value == 0) { freeTriesHBox.visible = false; freeTriesButton.visible = true; } }"/>
										<mx:Label id="freeTriesUnits" text="Free Tries" styleName="whiteText" verticalCenter="0" left="70" />
									</mx:HBox>
								</mx:Canvas>
							</mx:HBox>
						</mx:VBox>
					</mx:VBox>
			</mx:HBox>
		</mx:Canvas>
	</mx:VBox>
</materia:CreatorBase>